//!
//! @brief This program tests the Manifold :: isSafeToProcess() function,
//! which uses LBTS to find the lower bound time stamp in the whole system
//! and then determine whether an event can be safely processed.
//! In this program we don't actually schedule any events. Instead, we create
//! a series of random numbers to simulate event timestamps. The processes
//! don't send messages to each other either, except, of course, the allGather
//! used in LBTS.
//!
#include <Test.h>
#include <TestAssert.h>
#include <TestCaller.h>
#include <TestFixture.h>
#include <TestSuite.h>
#include <cppunit/ui/text/TestRunner.h>

#include <stdio.h>
#include <stdlib.h>
#include <fstream>
#include <iostream>
#include "component.h"
#include "manifold.h"
#include "mpi.h"

using namespace std;
using namespace manifold::kernel;

//####################################################################
// ManifoldTest is the unit test class for the class Manifold.
//####################################################################
class ManifoldTest : public CppUnit::TestFixture {
 public:
  /**
   * Initialization function. Inherited from the CPPUnit framework.
   */
  void setUp() {}

  //! Test the Manifold :: isSafeToProcess() function.
  //! Each MPI task creates a series of random numbers in increasing
  //! order to represent timestamps of events.
  //! The first number is randomly generated; the rest are generated by
  //! adding a random interval to the previous number.
  //! Then we go through the series and simulating event processing.
  void testIsSafeToProcess() {
    int Mytid;  // task id
    MPI_Comm_rank(MPI_COMM_WORLD, &Mytid);

    char buf[10];
    sprintf(buf, "DBG_LOG%d", Mytid);
    ofstream DBG_LOG(buf);

    const int SIZE = 3;  // SIZE numbers are generated
    double when[SIZE + 1];

    srandom((Mytid + 123) * 123);
    when[0] = random() / (RAND_MAX + 1.0) * 10;  // a number between 0 and 10
    for (int i = 1; i < SIZE; i++) {
      // when[i] = when[i-1] + d;   1 <= d < 6
      when[i] = when[i - 1] + (random() / (RAND_MAX + 1.0) * 5 + 1);
    }
    when[SIZE] = 1000000;
    CPPUNIT_ASSERT(when[SIZE - 1] < when[SIZE]);

    for (int i = 0; i < SIZE + 1; i++) {
      DBG_LOG << when[i] << " ";
    }
    DBG_LOG << endl;

    // go through the numbers.
    for (int i = 0; i < SIZE + 1; i++) {
      DBG_LOG << "### processing event " << i + 1 << " @" << when[i] << endl;
      int count = 0;
      while (true) {
        double old_granted = Manifold ::grantedTime;
        DBG_LOG << ++count << " calls..." << endl;
        if (Manifold ::isSafeToProcess(when[i])) {
          DBG_LOG << "safe to process: req= " << when[i]
                  << ", granted= " << Manifold ::grantedTime << endl;
          DBG_LOG << "old granted= " << old_granted
                  << ", new granted= " << Manifold ::grantedTime << endl;
          break;
        }
        else {
          DBG_LOG << "not safe." << endl;
          DBG_LOG << "old granted= " << old_granted
                  << ", new granted= " << Manifold ::grantedTime << endl;
        }
      }  // while
    }    // for
  }

  /**
   * Build a test suite.
   */
  static CppUnit::Test *suite() {
    CppUnit::TestSuite *mySuite = new CppUnit::TestSuite("ManifoldTest");

    mySuite->addTest(new CppUnit::TestCaller<ManifoldTest>(
        "testIsSafeToProcess", &ManifoldTest::testIsSafeToProcess));

    return mySuite;
  }
};

int main(int argc, char **argv) {
  Manifold ::Init(argc, argv);
  if (2 != TheMessenger.get_node_size()) {
    cerr << "ERROR: Must specify \"-np 2\" for mpirun!" << endl;
    return 1;
  }

  CppUnit::TextUi::TestRunner runner;
  runner.addTest(ManifoldTest::suite());
  runner.run();

  MPI_Finalize();

  return 0;
}
